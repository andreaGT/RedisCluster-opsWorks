AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  AWS CloudFormation Template for Chef-RedisCluster: This template
  installs a Redis cluster consisting of 3 masters.
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ServiceRole:
    Default: aws-opsworks-service-role
    Description: The OpsWorks service role
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  InstanceRole:
    Default: aws-opsworks-ec2-role
    Description: The OpsWorks instance role
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
Resources:
  SecurityGroupOpsWorkCustom:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: nodeaccess-Lab-andrea
      GroupDescription: acceso a los nodos - lab becados
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '6380'
          ToPort: '6380'
  owStack:
    Type: 'AWS::OpsWorks::Stack'
    Properties:
      Name: !Ref 'AWS::StackName'
      ServiceRoleArn: !Join
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - ':role/'
          - !Ref ServiceRole
      DefaultInstanceProfileArn: !Join
        - ''
        - - 'arn:aws:iam::'
          - !Ref 'AWS::AccountId'
          - ':instance-profile/'
          - !Ref InstanceRole
      UseCustomCookbooks: 'true'
      DefaultSshKeyName: !Ref KeyName
      ConfigurationManager: {
        "Name": "Chef",
        "Version": "12"
      }
      DefaultOs: "Ubuntu 16.04 LTS"
      CustomCookbooksSource:
        Type: git
        Url: 'https://github.com/andreaGT/redisCluster-opsworks.git'
  nodeLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId: !Ref owStack
      Type: custom
      Shortname: redisnode
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      Name: RedisClusterNode
      CustomSecurityGroupIds:
        - !GetAtt SecurityGroupOpsWorkCustom.GroupId
      CustomRecipes:
        Setup:
          - 'redisCluster::default'
        Configure:
          - 'redisCluster::nodes'
  clusterLayer:
    Type: AWS::OpsWorks::Layer
    Properties:
      StackId: !Ref owStack
      Type: custom
      Shortname: rediscluster
      EnableAutoHealing: 'true'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'true'
      Name: RedisClusterApp
      CustomSecurityGroupIds:
        - !GetAtt SecurityGroupOpsWorkCustom.GroupId
      CustomRecipes:
        Setup:
          - 'redisCluster::default'
        Configure:
          - 'redisCluster::cluster'
  node1Instance:
    Type: 'AWS::OpsWorks::Instance'
    Properties:
      StackId: !Ref owStack
      LayerIds:
        - !Ref nodeLayer
      InstanceType: m1.small
      Hostname: node1redis
  node2Instance:
    Type: 'AWS::OpsWorks::Instance'
    Properties:
      StackId: !Ref owStack
      LayerIds:
        - !Ref nodeLayer
      InstanceType: m1.small
      Hostname: node2redis
  node3Instance:
    Type: 'AWS::OpsWorks::Instance'
    Properties:
      StackId: !Ref owStack
      LayerIds:
        - !Ref nodeLayer
      InstanceType: m1.small
      Hostname: node3redis
  clusterInstance:
    DependsOn:
      - node1Instance
      - node2Instance
      - node3Instance
    Type: 'AWS::OpsWorks::Instance'
    Properties:
      StackId: !Ref owStack
      LayerIds:
        - !Ref clusterLayer
      InstanceType: m1.small
      Hostname: cluster1redis
